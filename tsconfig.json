{
  // "extends": "../tsconfig.json",                      /* 继承某个配置文件 */
  "include": [
    "src",
    "./*.ts",
    "@types",
    "package.json"
  ] /* 指定哪些文件需要编译 */,
  // "exclude": [],                                      /* 指定哪些文件不需要编译 */
  // "files": [],                                        /* 编译指定的文件 */
  // "references": [                                     /* 设置需要引用的子项目，适合一个大项目由许多小项目构成的情况，复用编译结果，以提高编译速度，引用的子项目必须启用"composite" */
  // { "path": "../pkg1" },                            /* 设置子项目tsconfig.json目录 */
  // { "path": "../pkg2/tsconfig.json" }               /* 设置子项目tsconfig.json文件 */
  // ],
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    "incremental": true /* 让 TypeScript 项目构建时产生文件tsbuildinfo，从而完成增量构建 */,
    "composite": true /* 打开某些设置，使得 TypeScript 项目可以进行增量构建，往往跟incremental属性配合使用 */,
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es5" /* 指定编译产物的 JS 版本 */,
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ] /* 描述项目需要加载的 TypeScript 内置类型描述文件，跟三斜线指令/// <reference lib="" />作用相同 */,
    "jsx": "react-jsx" /* 设置如何处理.tsx文件。[preserve: 保持 jsx 语法不变，输出的文件名为 jsx][react: 将<div />编译成React.createElement("div")，输出的文件名为.js][react-native: 保持 jsx 语法不变，输出的文件后缀名为.js] */,
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "esnext" /* 指定编译产物的模块格式。它的默认值与target属性有关，如果target是ES3或ES5，它的默认值是commonjs，否则就是ES6/ES2015 */,
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "baseUrl": "./" /* 指定 TypeScript 项目的基准目录 */,
    "paths": {
      "@/*": ["src/*"] // 配置vscode使用@提示（配合webpack配置）
    } /* Specify a set of entries that re-map imports to additional lookup locations. */,
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    "types": [
      /* Specify type package names to be included without being referenced in a source file. */
      "jest", // 测试运行器的名称
      "node"
    ],
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
    "resolveJsonModule": true /* Enable importing .json files. */,
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* 指定源目录的 JavaScript 文件是否原样拷贝到编译后的目录 */
    // "checkJs": true,                                  /* 置对 JS 文件同样进行类型检查。打开这个属性，也会自动打开allowJs。它等同于在 JS 脚本的头部添加// @ts-check命令 */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* 设置编译时是否为每个脚本生成类型声明文件.d.ts */
    // "declarationMap": true,                           /* 设置生成.d.ts类型声明文件的同时，还会生成对应的 Source Map 文件 */
    // "emitDeclarationOnly": true,                      /* 设置编译后只生成.d.ts文件，不生成.js文件 */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    "inlineSourceMap": true /* 设置将 SourceMap 文件写入编译后的 JS 文件中，否则会单独生成一个.js.map文件 */,
    "noEmit": true /* 不输出(意思是不编译代码，只执行类型检查) */,
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist" /* 指定编译产物存放的目录 */,
    // "removeComments": true,                           /* Disable emitting comments. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* 指定 SourceMap 文件的位置，而不是默认的生成位置 */
    // "inlineSources": true,                            /* 设置将原始的.ts代码嵌入编译后的 JS 中。它要求sourceMap或inlineSourceMap至少打开一个 */
    "emitBOM": true /* 设置是否在编译结果的文件头添加字节编码顺序标志 BOM */,
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* 设置生成的.d.ts文件所在的目录 */

    /* Interop Constraints */
    "isolatedModules": false /* 设置如果当前 TypeScript 脚本作为单个模块编译，是否会因为缺少其他脚本的类型信息而报错，主要便于非官方的编译工具（比如 Babel）正确编译单个脚本 */,
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    "allowSyntheticDefaultImports": true /* 允许import命令默认加载没有default输出的模块，例如(可以写`import React from "react"`，而不是`import * as React from "react"`) */,
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* 设置文件名是否为大小写敏感，默认为true */,

    /* Type Checking */
    "strict": true /* 启用所有严格类型检查选项 */,
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* 编译结果是否启用严格模式 */
    "noUnusedLocals": true /* 报告未使用的本地变量的错误 */,
    "noUnusedParameters": true /* 报告未使用参数的错 */,
    // "exactOptionalPropertyTypes": true,               /* 设置可选属性不能显示赋值为undefined */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noFallthroughCasesInSwitch": true /* 不允许switch的case语句贯穿 */,
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* 设置是否允许存在没有用到的代码标签. [undefined: 默认值，编辑器警告][true: 忽略不可能执行到的代码][false: 编译器报错] */
    // "allowUnreachableCode": true,                     /* 设置是否允许存在不可能执行到的代码，[undefined: 默认值，编辑器警告][true: 忽略不可能执行到的代码][false: 编译器报错] */

    "listEmittedFiles": true /* 设置编译时在终端显示，生成了哪些文件 */,
    "listFiles": true /* 设置编译时在终端显示，参与本次编译的文件列表 */,

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}
